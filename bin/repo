#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
test repo for git flows
'''

import os
import re
import sys
import random
import inspect

from ruamel import yaml
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from subprocess import check_call, check_output, Popen, PIPE, CalledProcessError

sys.dont_write_bytecode = True

from utils.format import fmt, pfmt

def clean(obj):
    if isinstance(obj, bytes):
        return obj.decode('utf-8').strip()
    return obj

REPOPATH = clean(check_output('git rev-parse --show-toplevel', shell=True))
SCRIPTPATH = os.path.dirname(__file__)
SCRIPTNAME = os.path.splitext(os.path.basename(__file__))[0]
SRCPATH = os.path.relpath(os.path.join(REPOPATH, 'src'))

DEFAULT = '\033[0;0m'
GREEN   = '\033[01;32m'
RED     = '\033[01;31m'

class NoFilesToModify(Exception):
    pass

# the following colorize code was taken from here and slighly modified
# src: https://stackoverflow.com/a/6196103
def colorize(stdout_color, stderr_color, enabled=True):

    def apply_colorize(func):
        class ColorWrapper(object):
            def __init__(self, wrapee, color):
                self.wrapee = wrapee
                self.color = color
            def __getattr__(self, attr):
                if attr == 'write' and self.wrapee.isatty():
                    return lambda x: self.wrapee.write(self.color + x + DEFAULT)
                else:
                    return getattr(self.wrapee, attr)

        def wrapper(*args, **kwds):
            old_stdout = sys.stdout
            old_stderr = sys.stderr
            sys.stdout = ColorWrapper(old_stdout, stdout_color)
            sys.stderr = ColorWrapper(old_stderr, stderr_color)
            try:
                func(*args, **kwds)
            finally:
                sys.stdout = old_stdout
                sys.stderr = old_stderr

        return wrapper if enabled else func

    return apply_colorize

class Repo(object):
    def __init__(self, branch):
        self.branch = branch

    def execute(self, args):
        methods = inspect.getmembers(self, predicate=inspect.ismethod)
        self._count = 0 # this MUST come AFTER the above getmembers call
        do_methods = {name[3:]: method for name, method in methods if name.startswith('do_')}
        parser = ArgumentParser(
            add_help=False)
        parser.add_argument(
            '-C', '--config',
            metavar='FILEPATH',
            default=fmt('{SCRIPTNAME}.yml'),
            help='default="%(default)s"; config filepath')
        if SCRIPTNAME in do_methods:
            args = [SCRIPTNAME] + args
        ns, rem = parser.parse_known_args(args)
        try:
            config = yaml.safe_load(open(ns.config))
        except FileNotFoundError as er:
            config = dict()
        parser = ArgumentParser(
            parents=[parser],
            description=__doc__,
            formatter_class=RawDescriptionHelpFormatter)
        parser.set_defaults(**config)
        subparsers = parser.add_subparsers(
            dest='command',
            title='commands',
            description='choose command to run')
        subparsers.required = True
        [self.add_command(subparsers, name, method) for name, method in do_methods.items()]
        self.ns = parser.parse_args(rem)
        self.ns.func(**self.ns.__dict__)

    def add_command(self, subparsers, name, method):
        parser = subparsers.add_parser(name)
        parser.set_defaults(func=method)
        method(parser=parser)
        return parser

    def run(self, *args, nerf=False, verbose=True, throw=True, do_repr=True, **kwargs):
        '''
        this wrapper around Popen; returns exitcode, stdout, stderr
        '''
        if (verbose or nerf) and args[0]:
            cmd = repr(args[0]) if do_repr else args[0]
            print('#{0}) {1}'.format(self.count, cmd))
        if nerf:
            return (None, 'nerfed', 'nerfed')

        process = Popen(
            shell=kwargs.pop('shell', True),
            stdout=kwargs.pop('stdout', PIPE),
            stderr=kwargs.pop('stderr', PIPE),
            *args, **kwargs)
        stdout, stderr = process.communicate()
        stdout = clean(stdout)
        stderr = clean(stderr)
        exitcode = process.poll()

        self.print_stdout(stdout, verbose)
        self.print_stderr(stderr, verbose)
        if exitcode and throw:
            raise CalledProcessError(exitcode, args[0])
        return exitcode, stdout, stderr

    @colorize(GREEN, RED)
    def print_stdout(self, stdout, verbose):
        if stdout and verbose:
            print(stdout)

    @colorize(GREEN, RED)
    def print_stderr(self, stderr, verbose):
        if stderr and verbose:
            print(stderr, file=sys.stderr)

    @property
    def beginning(self):
        '''
        this will print the second to last commit unless there is only one commit
        '''
        _, stdout, _ = self.run(
            'git log -1 --pretty=format:"%H" bin/',
            verbose=False)
        return stdout

    @property
    def current(self):
        '''
        return current sha
        '''
        _, stdout, _ = self.run('git rev-parse HEAD', verbose=False)
        return stdout

    @property
    def count(self):
        if hasattr(self, '_count'):
            self._count += 1
            return self._count

    @property
    def word(self):
        '''
        return random word without capitals or apostrophes
        '''
        _, stdout, _ =self.run('./word', cwd=SCRIPTPATH, verbose=False)
        return clean(stdout)

    def words(self, count):
        '''
        return random words without capitals or apostrophes
        '''
        return [self.word for i in range(0, count)]

    def lines(self, filepath, count=None):
        return open(filepath).read().strip().split('\n')

    def branches(self, prefix='dev/'):
        cmd = r'''git for-each-ref --shell --format="%(refname)" refs/heads/ | sed "s/'refs\/heads\/\(.*\)'/\1/"'''
        _, stdout, _ = self.run(cmd, verbose=False)
        def test(branch):
            return prefix is None or branch.startswith(prefix)
        return [clean(branch) for branch in stdout.split('\n') if test(branch)]

    def path(self, maximum, minimum=0, prefix=SRCPATH):
        words = self.words(random.randint(minimum, maximum))
        path = os.path.join(*words) if words else ''
        return os.path.relpath(os.path.join(prefix, path))

    def content(self, maximum, minimum=1):
        return '\n'.join(self.words(random.randint(minimum, maximum)))

    def changes(self, add=True, verbose=False):
        if os.path.isdir(SRCPATH):
            if add:
                self.run(fmt('git add {SRCPATH}'), verbose=verbose)
            _, stdout, _ = self.run(fmt('git status -s {SRCPATH}'), verbose=verbose)
            return stdout.split('\n') if stdout else []
        return []

    def filepaths(self, srcpath=SRCPATH, verbose=False):
        if os.path.isdir(srcpath):
            _, stdout, _ = self.run(fmt('find {srcpath} -type f'), verbose=verbose)
            return [os.path.relpath(f) for f in stdout.split()] if stdout else []
        return []

    def do_branch(self, parser=None, home=False, commit=False, **kwargs):
        if parser:
            parser.add_argument(
                '-H', '--home',
                action='store_true',
                help=fmt('reset to the {0} branch', self.branch))
            parser.add_argument(
                '-c', '--commit',
                action='store_true',
                help='after branch add a commit')
            return
        if home:
            self.run('git checkout '+self.branch)
        else:
            self.run('git checkout -b dev/'+self.word)
            if commit:
                self.do_commit(**kwargs)

    def do_change(self, parser=None, **kwargs):
        if parser:
            return
        if len(self.filepaths()):
            index = random.randint(1, 2)
            {
                1: self.do_create,
                2: self.do_modify,
            }[index](**kwargs)
        else:
            self.do_create(**kwargs)

    def do_commit(self, parser=None, branch=False, **kwargs):
        if parser:
            parser.add_argument(
                '-b', '--branch',
                action='store_true',
                help='before commit add a branch')
            return
        if branch:
            return self.do_branch(commit=True, **kwargs)
        name = self.word
        changes = self.changes()
        if not changes:
            self.do_change(**kwargs)
            changes = self.changes()
        changes = '\n'.join(['  '+change for change in changes])
        self.run(fmt('git add {SRCPATH}'))
        self.run(fmt('''git commit -m "'{name}' commit message for:\n{changes}"'''))

    def do_conflict(self, parser=None, **kwargs):
        if parser:
            return

    def do_create(self, parser=None, **kwargs):
        if parser:
            return
        name = self.word
        path = self.path(2)
        content = self.content(3)
        self.run(fmt('mkdir -p {path}'))
        self.run(fmt('echo "{content}" > {path}/{name}'))

    def do_merge(self, parser, **kwargs):
        if parser:
            return

    def do_modify(self, parser=None, modify_type='random', filepaths=None, **kwargs):
        MODIFY_TYPES = ['random', 'prepend', 'append', 'prefix', 'suffix']
        if parser:
            parser.add_argument(
                '--type',
                dest='modify_type',
                default='random',
                choices=MODIFY_TYPES,
                nargs='?',
                help='default="%(default)s"; choose modify style; choices=[%(choices)s]')
            return
        if filepaths is None:
            filepaths = self.filepaths()
        if not filepaths:
            raise NoFilesToModify
        count = random.randint(1, len(filepaths))
        if modify_type == 'random':
            modify_type = MODIFY_TYPES[random.randint(1, len(MODIFY_TYPES) - 1)]
        cmd = dict(
            append="sed -i '/^{line}$/a {content}' {filepath}",
            prepend="sed -i '/^{line}$/i {content}' {filepath}",
            prefix="sed -i 's/^{line}$/{content} &/' {filepath}",
            suffix="sed -i '/^{line}/ s/$/ {content}/' {filepath}",
        )[modify_type]
        for i in range(0, count):
            filepath = filepaths[i]
            content = self.content(1)
            lines = self.lines(filepath)
            index = random.randint(0, len(lines) - 1)
            line = lines[index]
            self.run(fmt(cmd))

    def do_munge(self, parser=None, **kwargs):
        if parser:
            return

    def do_rebase(self, parser=None, **kwargs):
        if parser:
            return

    def do_reset(self, parser=None, hard=False, **kwargs):
        if parser:
            parser.add_argument(
                '-H', '--hard',
                action='store_true',
                help='override default behavior to --hard')
            return
        self.run('git checkout ' + self.branch)
        if self.current != self.beginning:
            flags = '--hard' if hard else ''
            self.run(fmt('git reset {0} {1}', flags, self.beginning))
        else:
            print(
                'NO OP: current and beginning have the same sha1 hash:',
                self.beginning)

        if hard:
            if self.branches():
                self.run('''git branch -D $(printf "%s\n" $(git branch) | grep 'dev/')''')
            self.run('git clean -xfd --exclude=bin/')

if __name__ == '__main__':
    repo = Repo('master')
    repo.execute(sys.argv[1:])
